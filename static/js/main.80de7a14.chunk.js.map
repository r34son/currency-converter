{"version":3,"sources":["PaletteModeContext.ts","components/PaletteModeSwitch.tsx","components/TabPanel.tsx","components/Converter.tsx","components/Diff.tsx","components/ValuteCard.tsx","routes.ts","components/CurrencyList.tsx","services/cbr/index.ts","components/Main.tsx","queries.ts","components/Layout.tsx","queryClient.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createContext","PaletteModeSwitch","theme","useTheme","toggleMode","useContext","PaletteModeContext","ToggleButton","value","size","onClick","palette","mode","TabPanel","children","index","other","role","hidden","Box","sx","p","Converter","Diff","Arrow","ArrowUpwardRoundedIcon","ArrowDownwardRoundedIcon","display","alignItems","color","Math","abs","toFixed","ValuteCard","valute","Nominal","Name","CharCode","Value","Previous","Card","elevation","CardContent","Typography","noWrap","gutterBottom","justifyContent","IconButton","routes","label","Component","useState","page","setPage","handleChange","useCallback","_","daily","useQueryClient","getQueryData","valutes","useMemo","Object","values","Valute","Stack","spacing","Grid","container","slice","rows","map","item","xs","ID","Pagination","variant","count","ceil","length","onChange","defaultPath","keys","cbr","axios","create","baseURL","timeout","fetchDaily","a","get","data","Main","pathname","useLocation","isLoading","useQuery","currentTab","AppBar","position","Tabs","indicatorColor","textColor","entries","path","Tab","component","Link","to","Layout","Container","maxWidth","height","Paper","width","overflow","top","right","QueryClient","defaultOptions","queries","staleTime","Infinity","App","prefersDarkMode","useMediaQuery","noSsr","paletteMode","setPaletteMode","prevMode","createTheme","QueryClientProvider","client","queryClient","Provider","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80de7a14.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport default createContext<() => void>(() => {});\n","import { ToggleButton, useTheme } from '@mui/material';\nimport { useContext } from 'react';\nimport DarkModeIcon from '@mui/icons-material/DarkMode';\nimport LightModeIcon from '@mui/icons-material/LightMode';\nimport PaletteModeContext from '../PaletteModeContext';\n\nconst PaletteModeSwitch = () => {\n  const theme = useTheme();\n  const toggleMode = useContext(PaletteModeContext);\n\n  return (\n    <ToggleButton\n      value=\"\"\n      size=\"small\"\n      onClick={toggleMode}\n    >\n      {theme.palette.mode === 'dark' ? <DarkModeIcon /> : <LightModeIcon />}\n    </ToggleButton>\n  );\n};\n\nexport default PaletteModeSwitch;\n","import { Box } from '@mui/material';\nimport { FC } from 'react';\n\ninterface Props {\n  value: number;\n  index: number;\n}\n\nconst TabPanel: FC<Props> = ({ children, value, index, ...other }) => (\n  <div\n    role=\"tabpanel\"\n    hidden={value !== index}\n    {...other}\n  >\n    {value === index && (\n    <Box sx={{ p: 3 }}>\n      {children}\n    </Box>\n    )}\n  </div>\n);\n\nexport default TabPanel;\n","const Converter = () => (\n  <div>\n    Конвертер\n  </div>\n);\n\nexport default Converter;\n","import ArrowUpwardRoundedIcon from '@mui/icons-material/ArrowUpwardRounded';\nimport ArrowDownwardRoundedIcon from '@mui/icons-material/ArrowDownwardRounded';\nimport { Box } from '@mui/material';\n\nconst Diff = ({ value }: { value: number }) => {\n  const Arrow = value > 0 ? ArrowUpwardRoundedIcon : ArrowDownwardRoundedIcon;\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center', color: value > 0 ? 'green' : 'red' }}>\n      <Arrow />{Math.abs(value).toFixed(4)}\n    </Box>\n  );\n};\n\nexport default Diff;\n","import { Card, CardContent, Typography, IconButton, Box } from '@mui/material';\nimport SwapHorizRoundedIcon from '@mui/icons-material/SwapHorizRounded';\nimport { Valute } from '../services/cbr/models';\nimport Diff from './Diff';\n\ninterface Props {\n  valute: Valute;\n}\n\nconst ValuteCard = ({ valute: { Nominal, Name, CharCode, Value, Previous } }: Props) => (\n  <Card elevation={3}>\n    <CardContent>\n      <Typography color=\"text.secondary\" noWrap gutterBottom>\n        {Name}\n      </Typography>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n        <Box>\n          {Nominal} {CharCode}\n          <IconButton size=\"small\"><SwapHorizRoundedIcon /></IconButton>\n          {Value} RUB\n        </Box>\n        <Diff value={Value - Previous} />\n      </Box>\n    </CardContent>\n  </Card>\n);\n\nexport default ValuteCard;\n","import Converter from './components/Converter';\nimport CurrencyList from './components/CurrencyList';\n\nexport type TRoute = { label: string; value: number, Component: () => JSX.Element };\n\nexport const routes: Record<string, TRoute> = {\n  '/currency-list': { label: 'Список валют', value: 0, Component: CurrencyList },\n  '/converter': { label: 'Конвертер', value: 1, Component: Converter },\n};\n\nexport const defaultPath = Object.keys(routes)[0];\n","import { useCallback, useMemo, useState } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { Pagination, Stack, Grid, GridSize } from '@mui/material';\nimport { Daily } from '../services/cbr/models';\nimport ValuteCard from './ValuteCard';\n\nconst cardsInRow = 3;\nconst rows = 4;\nconst pageSize = rows * cardsInRow;\n\nconst CurrencyList = () => {\n  const [page, setPage] = useState(1);\n  const handleChange = useCallback((_: unknown, value: number) => setPage(value), []);\n  const queryClient = useQueryClient();\n  const daily = queryClient.getQueryData<Daily>('daily');\n  const valutes = useMemo(() => Object.values(daily?.Valute || {}), [daily?.Valute]);\n\n  return (\n    <Stack spacing={2}>\n      <Grid container spacing={2}>\n        {valutes\n          .slice((page - 1) * pageSize, page * pageSize)\n          .map((valute) => (\n            <Grid key={valute.ID} item xs={(12 / cardsInRow) as GridSize}>\n              <ValuteCard valute={valute} />\n            </Grid>\n          ))}\n      </Grid>\n      <Pagination\n        sx={{ display: 'flex', justifyContent: 'center' }}\n        variant=\"outlined\"\n        count={Math.ceil(valutes.length / pageSize)}\n        page={page}\n        onChange={handleChange}\n      />\n    </Stack>\n  );\n};\n\nexport default CurrencyList;\n","import axios from 'axios';\nimport { Daily } from './models';\n\nconst cbr = axios.create({\n  baseURL: 'https://www.cbr-xml-daily.ru/',\n  timeout: 1000,\n});\n\nexport const fetchDaily = async () => (await cbr.get<Daily>('daily_json.js')).data;\n\nexport default cbr;\n","import { useMemo } from 'react';\nimport { AppBar, Tab, Tabs, CircularProgress, Box } from '@mui/material';\nimport { useLocation, Link, Switch, Route } from 'react-router-dom';\nimport TabPanel from './TabPanel';\nimport { routes } from '../routes';\nimport { useDaily } from '../queries';\n\nconst Main = () => {\n  const { pathname } = useLocation();\n  const { isLoading } = useDaily();\n\n  const currentTab = useMemo(() => routes[pathname]?.value, [pathname]);\n\n  if (isLoading) return null;\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Tabs\n          value={currentTab}\n          indicatorColor=\"secondary\"\n          textColor=\"inherit\"\n          variant=\"fullWidth\"\n        >\n          {Object.entries(routes).map(([path, { label, value }]) =>\n            <Tab key={value} label={label} component={Link} to={path} />,\n          )}\n        </Tabs>\n      </AppBar>\n      <Switch>\n        {Object.entries(routes).map(([path, { value, Component }]) => (\n          <Route key={value} path={path}>\n            <TabPanel value={currentTab} index={value}>\n              <Component />\n            </TabPanel>\n          </Route>\n        ))}\n      </Switch>\n    </>\n  );\n};\n\nexport default Main;\n","import { useQuery } from 'react-query';\nimport { fetchDaily } from './services/cbr';\n\nexport const useDaily = () => useQuery('daily', fetchDaily);\n","import { Container, Paper, Box } from '@mui/material';\nimport { useLocation, Redirect } from 'react-router-dom';\nimport PaletteModeSwitch from './PaletteModeSwitch';\nimport Main from './Main';\nimport { routes, defaultPath } from '../routes';\n\nconst Layout = () => {\n  const { pathname } = useLocation();\n\n  if (!routes[pathname]) return <Redirect to={defaultPath} />;\n  return (\n    <Container\n      maxWidth=\"lg\"\n      sx={{ height: '100vh', display: 'flex', alignItems: 'center' }}\n    >\n      <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n        <Main />\n      </Paper>\n      <Box sx={{ position: 'absolute', top: 50, right: 50 }}>\n        <PaletteModeSwitch />\n      </Box>\n    </Container>\n  );\n};\n\nexport default Layout;\n","import { QueryClient } from 'react-query';\n\nexport default new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: Infinity,\n    },\n  },\n});\n","import { useCallback, useMemo, useState } from 'react';\nimport { QueryClientProvider } from 'react-query';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { CssBaseline, PaletteMode, useMediaQuery } from '@mui/material';\nimport { HashRouter } from 'react-router-dom';\nimport PaletteModeContext from './PaletteModeContext';\nimport Layout from './components/Layout';\nimport queryClient from './queryClient';\n\nconst App = () => {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', { noSsr: true });\n  const [paletteMode, setPaletteMode] = useState<PaletteMode>(prefersDarkMode ? 'dark' : 'light');\n\n  const toggleMode = useCallback(\n    () => setPaletteMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light')),\n    [],\n  );\n\n  // Update the theme only if the mode changes\n  const theme = useMemo(() => createTheme({ palette: { mode: paletteMode } }), [paletteMode]);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <PaletteModeContext.Provider value={toggleMode}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <HashRouter>\n            <Layout />\n          </HashRouter>\n        </ThemeProvider>\n      </PaletteModeContext.Provider>\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}